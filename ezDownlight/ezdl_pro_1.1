<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ezDownlight - Calcolatore Illuminotecnico Professionale</title>
    <style>
        body {
            font-family: 'Ubuntu Mono', monospace;
            margin: 20px;
            background-color: #000000;
            color: #bebebe;
        }
        .container {
            background-color: #313131;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative; /* Questo è solo per la scritta del copyright in basso a DX */
        }
        h1 {
            text-align: center;
            color: #555;
            margin-bottom: 20px;
        }
        .input-group {
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #777;
            width: 100%;
        }
        input[type="number"], select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            background-color: #444; /* Darker input background */
            color: #eee; /* Lighter text color */
        }
        input[type="checkbox"] {
            margin-top: 10px;
            width: auto; /* Override 100% width for checkbox */
        }
        button {
            background-color: #bebebe;
            color: #313131; /* Darker text for contrast */
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Add shadow for depth */
        }
        button:hover {
            background-color: #7e7e7e;
        }
        #risultato {
            margin-top: 20px;
            padding: 15px;
            background-color: #2a2a2a; /* Darker background for results */
            border-radius: 4px;
            font-size: 16px;
            color: #e9ecef; /* Lighter text for results */
            white-space: pre-line;
            max-height: 400px;
            overflow-y: auto;
            width: 100%;
            box-sizing: border-box;
            border: 1px solid #555; /* Subtle border */
        }
        #loading {
            display: none;
            text-align: center;
            margin-top: 10px;
            font-weight: bold;
            color: #007bff;
        }
        #piantaCanvas {
            border: 1px solid #555; /* Darker border for canvas */
            margin-top: 20px;
            background-color: #1a1a1a; /* Darker background for canvas */
            display: block;
            max-width: 100%;
            height: auto;
            box-sizing: border-box;
        }
        .input-container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 100%;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        .input-container .input-group {
            width: 48%;
            margin-right: 0;
            margin-bottom: 0;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            box-sizing: border-box;
        }
        .copyright { /*scritta copiraitttttt*/
            position: absolute;
            bottom: 7.5px;
            right: 10px;
            font-size: 0.7em;
            color:#bebebe;
            white-space: nowrap;
        }
        @media (max-width: 400px) {
            .input-container .input-group {
                width: 100%;
            }
        }
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            .input-container {
                flex-direction: column;
            }
            .input-container .input-group {
                width: 100%;
            }
            input[type="number"], select {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ezDownlight</h1>
        <div class="input-container">
            <div class="input-group">
                <label for="lunghezza">Lunghezza stanza (m):</label>
                <input type="number" id="lunghezza" placeholder="es. 5" step="0.1">
            </div>
            <div class="input-group">
                <label for="larghezza">Larghezza stanza (m):</label>
                <input type="number" id="larghezza" placeholder="es. 4" step="0.1">
            </div>
        </div>
        <div class="input-container">
            <div class="input-group">
                <label for="altezzaMontaggio">Altezza installazione faretti (m):</label>
                <input type="number" id="altezzaMontaggio" placeholder="es. 3" step="0.1">
            </div>
            <div class="input-group">
                <label for="numFarettiX">Numero faretti (asse X):</label>
                <input type="number" id="numFarettiX" placeholder="es. 2" value="2">
            </div>
        </div>
        <div class="input-container">
            <div class="input-group">
                <label for="numFarettiY">Numero faretti (asse Y):</label>
                <input type="number" id="numFarettiY" placeholder="es. 2" value="2">
            </div>
            <div class="input-group">
                <label for="lumenFaretto">Lumen per faretto (lm):</label>
                <input type="number" id="lumenFaretto" placeholder="es. 1000">
            </div>
        </div>
        <div class="input-container">
            <div class="input-group">
                <label for="fascio">Apertura fascio:</label>
                <select id="fascio">
                    <option value="5">5°</option>
                    <option value="10">10°</option>
                    <option value="15">15°</option>
                    <option value="20">20°</option>
                    <option value="26">26°</option>
                    <option value="36">36°</option>
                    <option value="50">50°</option>
                    <option value="60">60°</option>
                </select>
            </div>
            <div class="input-group">
                <label for="fattoreManutenzione">Fattore di Manutenzione (MF):</label>
                <input type="number" id="fattoreManutenzione" value="0.8" step="0.01" min="0.1" max="1.0">
            <div class="copyright">tutti i diritti riservati a Luce InForma &copy;</div> 
        </div>
        <div class="input-container">
            <div class="input-group">
                <label for="applicaOffset">Applica offset 0.5m da pareti:</label>
                <input type="checkbox" id="applicaOffset">
            </div>
             <div class="input-group">
                </div>
        </div>
        <button onclick="calcolaFaretti()">Calcola Illuminamento</button>
        <div id="loading">Calcolo in corso...</div>
        <div id="risultato"></div>
        <canvas id="piantaCanvas" width="400" height="300"></canvas>
    </div>
    <script>
        // H working plane a 0.8m, come da normativa UNI EN 12464-1
        const PIANO_LAVORO_Z = 0.8;

        // Dati semplificati per simulazione curva fotometrica.
        // Prevedere qui il futuro parsing di file IES.
        const distribuzioniIntensita = {
            "5": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 2.5, intensitaRelativa: 0.85 },
                { angolo: 5, intensitaRelativa: 0.05 },
                { angolo: 90, intensitaRelativa: 0.00 } // Aggiunto per angoli maggiori
            ],
            "10": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 5, intensitaRelativa: 0.90 },
                { angolo: 10, intensitaRelativa: 0.10 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "15": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 7.5, intensitaRelativa: 0.80 },
                { angolo: 15, intensitaRelativa: 0.20 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "20": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 10, intensitaRelativa: 0.70 },
                { angolo: 20, intensitaRelativa: 0.30 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "26": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 13, intensitaRelativa: 0.65 },
                { angolo: 26, intensitaRelativa: 0.35 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "36": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 18, intensitaRelativa: 0.60 },
                { angolo: 36, intensitaRelativa: 0.40 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "50": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 25, intensitaRelativa: 0.55 },
                { angolo: 50, intensitaRelativa: 0.45 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
            "60": [
                { angolo: 0, intensitaRelativa: 1.00 },
                { angolo: 30, intensitaRelativa: 0.50 },
                { angolo: 60, intensitaRelativa: 0.48 },
                { angolo: 90, intensitaRelativa: 0.00 }
            ],
        };

        /**
         * Funzione calcolo
         * Recupera i valori dagli input utente e gestisce l'interfaccia di caricamento.
         */
        function calcolaFaretti() {
            const lunghezzaArea = parseFloat(document.getElementById("lunghezza").value);
            const larghezzaArea = parseFloat(document.getElementById("larghezza").value);
            const altezzaMontaggio = parseFloat(document.getElementById("altezzaMontaggio").value);
            const numFarettiX = parseInt(document.getElementById("numFarettiX").value);
            const numFarettiY = parseInt(document.getElementById("numFarettiY").value);
            const lumenFaretto = parseFloat(document.getElementById("lumenFaretto").value);
            const angoloFascio = document.getElementById("fascio").value;
            const fattoreManutenzione = parseFloat(document.getElementById("fattoreManutenzione").value);
            const applicaOffset = document.getElementById("applicaOffset").checked;

            // Validazione degli input
            if (isNaN(lunghezzaArea) || isNaN(larghezzaArea) || isNaN(altezzaMontaggio) ||
                isNaN(numFarettiX) || isNaN(numFarettiY) || isNaN(lumenFaretto) ||
                isNaN(fattoreManutenzione) || lunghezzaArea <= 0 || larghezzaArea <= 0 ||
                altezzaMontaggio <= 0 || numFarettiX <= 0 || numFarettiY <= 0 || lumenFaretto <= 0 ||
                fattoreManutenzione <= 0 || fattoreManutenzione > 1) {
                document.getElementById("risultato").innerText = "Inserisci valori validi e positivi in tutti i campi. Il Fattore di Manutenzione deve essere tra 0.1 e 1.0.";
                return;
            }

            // Indicatore loading giusto per, se qualcuno ha il PC patata
            document.getElementById("loading").style.display = "block";
            document.getElementById("risultato").innerText = "";

            // Funzione di timeout che fa un piccolo ritardo così la UI ha tempo di svegliarsi fuori BUG DI MERDA
            setTimeout(function () {
                const risultato = calcolaIlluminazione(
                    lunghezzaArea,
                    larghezzaArea,
                    altezzaMontaggio,
                    numFarettiX,
                    numFarettiY,
                    lumenFaretto,
                    angoloFascio,
                    fattoreManutenzione,
                    applicaOffset
                );
                document.getElementById("loading").style.display = "none";
                document.getElementById("risultato").innerText = risultato;
            }, 0);
        }

        /** TUTTO QUESTO GIUDA E' LUNGHISSIMO, ADESSO SPIEGO COSA FA:
         * Calcola E in tutti i punti della griglia (come da sopralluogo), Eavg, Emin, g0 (uniformità) e altre metriche complessive, ovvero:
         * @param {number} lunghezzaStanza -> Lunghezza stanza
         * @param {number} larghezzaStanza -> Larghezza stanza
         * @param {number} altezzaMontaggio -> Altezza installazione dei faretti dal pavimento in metri
         * @param {number} numFarettiX -> Numero faretti asse X
         * @param {number} numFarettiY -> Numero faretti asse Y
         * @param {number} lumenFaretto -> Flusso luminoso (top se il valore inserito è il delivered) di ciascun faretto in lumen
         * @param {string} angoloFascio -> Beam angle in gradi (diocan di stringa per la conversione da/in radianti)
         * @param {number} fattoreManutenzione -> MF per gli zingari squattrinati che non hanno una calcolatrice per fare x*0.8 e vogliono pignoleggiare perché sono troppo poveri per cambiare LED fra 5 anni
         * @param {boolean} applicaOffset -> Wall Zone opzionale per chi non la usa (aka mongoloide, torna a studiare lighting design)
         * @returns {string} -> Log riassuntivo risultati
         */
        function calcolaIlluminazione(lunghezzaStanza, larghezzaStanza, altezzaMontaggio, numFarettiX, numFarettiY, lumenFaretto, angoloFascio, fattoreManutenzione, applicaOffset) {
            // Calcola coordinate posizione faretti
            const spaziaturaX = lunghezzaStanza / (numFarettiX + 1);
            const spaziaturaY = larghezzaStanza / (numFarettiY + 1);

            const posizioniFaretti = [];
            for (let i = 0; i < numFarettiX; i++) {
                for (let j = 0; j < numFarettiY; j++) {
                    const posX = (i + 1) * spaziaturaX;
                    const posY = (j + 1) * spaziaturaY;
                    posizioniFaretti.push({ x: posX, y: posY, z: altezzaMontaggio });
                }
            }

            // Genera matrice dei punti di calcolo sul working plane
            const matricePunti = generaMatricePunti(lunghezzaStanza, larghezzaStanza, applicaOffset);

            if (matricePunti.length === 0) {
                return "L'area di calcolo è troppo piccola per generare punti validi con l'offset specificato.";
            }

            let illuminamentoMinimo = Infinity;
            let illuminamentoTotale = 0;
            const illuminamentiPerPunto = [];

            // Calcola E per ogni punto della matrice
            for (let i = 0; i < matricePunti.length; i++) {
                let illuminamentoPunto = 0;
                for (let j = 0; j < posizioniFaretti.length; j++) {
                    illuminamentoPunto += calcolaIlluminamentoPunto(lumenFaretto, angoloFascio, posizioniFaretti[j], matricePunti[i]);
                }
                illuminamentoTotale += illuminamentoPunto;
                illuminamentiPerPunto.push(illuminamentoPunto);
                if (illuminamentoPunto < illuminamentoMinimo) {
                    illuminamentoMinimo = illuminamentoPunto;
                }
            }

            // Calcolo delle metriche finali (Eavg, Eavg + MF, g0)
            const EavgIniziale = illuminamentoTotale / matricePunti.length;
            const EavgMantenuto = EavgIniziale * fattoreManutenzione;
            const U0 = EavgIniziale > 0 ? illuminamentoMinimo / EavgIniziale : 0; // Da il valore dell'uniformità

            // Determina dimensioni reali del working plane (necessaria se si usa offset)
            let areaCalcoloLunghezza = lunghezzaStanza;
            let areaCalcoloLarghezza = larghezzaStanza;
            if (applicaOffset) {
                const offsetVal = 0.5;
                areaCalcoloLunghezza = Math.max(0, lunghezzaStanza - 2 * offsetVal);
                areaCalcoloLarghezza = Math.max(0, larghezzaStanza - 2 * offsetVal);
            }

            // Tutto il dio cane che serve per riportare testualmente i valori calcolati
            let messaggio = `Dimensioni Stanza: ${lunghezzaStanza.toFixed(2)} m x ${larghezzaStanza.toFixed(2)} m\n`;
            messaggio += `Altezza Installazione Faretti: ${altezzaMontaggio.toFixed(2)} m\n`;
            messaggio += `Altezza Piano di Lavoro: ${PIANO_LAVORO_Z.toFixed(2)} m\n`;
            messaggio += `Area di Calcolo Effettiva: ${areaCalcoloLunghezza.toFixed(2)} m x ${areaCalcoloLarghezza.toFixed(2)} m\n`;
            messaggio += `Punti di Calcolo Generati: ${matricePunti.length}\n`;
            messaggio += `Numero faretti (asse X): ${numFarettiX}\n`;
            messaggio += `Numero faretti (asse Y): ${numFarettiY}\n`;
            messaggio += `Interdistanza faretti (X): ${spaziaturaX.toFixed(2)} m\n`;
            messaggio += `Interdistanza faretti (Y): ${spaziaturaY.toFixed(2)} m\n`;
            messaggio += `\n--- Risultati Illuminotecnici ---\n`;
            messaggio += `Illuminamento Medio Iniziale: ${EavgIniziale.toFixed(2)} Lux\n`;
            messaggio += `Fattore di Manutenzione (MF): ${fattoreManutenzione.toFixed(2)}\n`;
            messaggio += `Illuminamento Medio Mantenuto (Eavg): ${EavgMantenuto.toFixed(2)} Lux\n`;
            messaggio += `Illuminamento Minimo (Emin): ${illuminamentoMinimo.toFixed(2)} Lux\n`;
            messaggio += `Uniformità (U0 = Emin/Eavg): ${U0.toFixed(2)}\n\n`;
            // OCIO siccome mi veniva un log infinito, aggiungo questo per mostrare solo i primi 10 (tanto chi cazzo li legge, solo io madonna troia)
            messaggio += "Illuminamento per punto di calcolo (primi 10):\n";
            for (let i = 0; i < Math.min(10, matricePunti.length); i++) {
                const punto = matricePunti[i];
                const illuminamento = illuminamentiPerPunto[i];
                messaggio += `Punto (X=${punto.x.toFixed(2)}m, Y=${punto.y.toFixed(2)}m): ${illuminamento.toFixed(2)} Lux\n`;
            }
            if (matricePunti.length > 10) {
                messaggio += `...(visualizzati solo i primi 10 punti su ${matricePunti.length})\n`;
            }


            // Disegna la pianta con i faretti e i punti di calcolo
            disegnaPianta(lunghezzaStanza, larghezzaStanza, posizioniFaretti, matricePunti, numFarettiX, numFarettiY, applicaOffset);
            return messaggio;
        }

        /**
         * Calcola l'intensità luminosa (I0) al centro del fascio, basandosi sul flusso luminoso totale
         * e sull'angolo del fascio. Questa è una semplificazione del concetto IES.
         * @param {number} lumen Flusso luminoso totale del faretto.
         * @param {string} angoloFascio Gradi dell'angolo di fascio.
         * @returns {number} L'intensità luminosa al centro (cd).
         */
        function calcolaI0(lumen, angoloFascio) {
            // Approssimiamo l'angolo solido (Omega) per un cono.
            // Questa è una semplificazione, in un vero IES I0 è un valore misurato.
            const angoloRadianti = parseFloat(angoloFascio) * Math.PI / 180;
            // Usiamo l'angolo del fascio completo per il calcolo dell'angolo solido
            const omega = 2 * Math.PI * (1 - Math.cos(angoloRadianti / 2));
            // Se omega è troppo piccolo, gestiamo per evitare divisioni per zero
            if (omega < 1e-6) return lumen; // Ritorna lumen come intensità se il fascio è quasi puntiforme
            return lumen / omega;
        }

        /**
         * Calcola l'intensità luminosa per un dato angolo, interpolando dai dati di distribuzione.
         * @param {number} I0 Intensità luminosa al centro del fascio.
         * @param {string} angoloFascioGradi Angolo di apertura del fascio in gradi (stringa).
         * @param {number} thetaGradi Angolo rispetto all'asse del faretto (verticale) in gradi.
         * @returns {number} L'intensità luminosa interpolata per l'angolo dato (cd).
         */
        function calcolaIntensitaAngolo(I0, angoloFascioGradi, thetaGradi) {
            const distribuzione = distribuzioniIntensita[angoloFascioGradi.toString()];
            if (!distribuzione) {
                console.error("Angolo fascio non supportato:", angoloFascioGradi);
                return 0;
            }

            // Assicurati che thetaGradi non superi l'ultimo angolo misurato
            if (thetaGradi >= distribuzione[distribuzione.length - 1].angolo) {
                return I0 * distribuzione[distribuzione.length - 1].intensitaRelativa;
            }
            if (thetaGradi <= distribuzione[0].angolo) {
                return I0 * distribuzione[0].intensitaRelativa;
            }

            // Trova l'intervallo per l'interpolazione lineare
            let intensitaRelativa = 0;
            for (let i = 0; i < distribuzione.length - 1; i++) {
                if (thetaGradi >= distribuzione[i].angolo && thetaGradi < distribuzione[i + 1].angolo) {
                    const angolo1 = distribuzione[i].angolo;
                    const angolo2 = distribuzione[i + 1].angolo;
                    const intensita1 = distribuzione[i].intensitaRelativa;
                    const intensita2 = distribuzione[i + 1].intensitaRelativa;
                    // Interpolazione lineare
                    intensitaRelativa = intensita1 + (intensita2 - intensita1) * (thetaGradi - angolo1) / (angolo2 - angolo1);
                    break;
                }
            }
            return I0 * intensitaRelativa;
        }

        /**
         * Calcola l'illuminamento in un singolo punto da un singolo faretto,
         * applicando la legge combinata dell'inverso del quadrato e del coseno.
         * @param {number} lumen Flusso luminoso totale del faretto.
         * @param {string} angoloFascioGradi Angolo di apertura del fascio in gradi (stringa).
         * @param {object} farettoPos Posizione del faretto ({x, y, z}).
         * @param {object} puntoPos Posizione del punto di calcolo ({x, y, z}).
         * @returns {number} L'illuminamento in Lux nel punto specificato.
         */
        function calcolaIlluminamentoPunto(lumen, angoloFascioGradi, farettoPos, puntoPos) {
            const I0 = calcolaI0(lumen, angoloFascioGradi);

            // Calcola la distanza orizzontale tra faretto e punto
            const distanzaOrizzontale = Math.sqrt(
                Math.pow(farettoPos.x - puntoPos.x, 2) +
                Math.pow(farettoPos.y - puntoPos.y, 2)
            );

            // Calcola l'altezza relativa tra faretto e piano di lavoro (sempre positiva)
            const altezzaRelativa = Math.abs(farettoPos.z - puntoPos.z);

            // Calcola la distanza 3D tra faretto e punto, per far sì che ogni singolo punto sia affected dal faretto
            const distanza3D = Math.sqrt(
                Math.pow(distanzaOrizzontale, 2) +
                Math.pow(altezzaRelativa, 2)
            );

            if (distanza3D === 0) {
                // Se il punto è esattamente alla stessa posizione del faretto, l'illuminamento è indefinito.
                // In un contesto pratico, questo non dovrebbe accadere per il piano di lavoro a 0.8m.
                // Restituiamo un valore molto alto per indicare un "hot spot" teorico.
                return 1000000;
            }

            // Calcola l'angolo (in gradi) tra il raggio luminoso e l'asse verticale del faretto.
            // Questo angolo è usato per la lookup nell'IES (o nella distribuzione semplificata).
            const angoloDalVerticaleRad = Math.atan2(distanzaOrizzontale, altezzaRelativa);
            const angoloDalVerticaleGradi = angoloDalVerticaleRad * 180 / Math.PI;

            // Recupera l'intensità luminosa (I) per l'angolo calcolato, interpolando dai dati del fascio.
            const intensita = calcolaIntensitaAngolo(I0, angoloFascioGradi, angoloDalVerticaleGradi);

            // Calcola il coseno dell'angolo di incidenza (theta) tra il raggio luminoso e la normale al piano di lavoro.
            // Per un piano di lavoro orizzontale, questo è semplicemente altezzaRelativa / distanza3D.
            const cosTheta = altezzaRelativa / distanza3D;

            // Applica la legge combinata dell'inverso del quadrato e del coseno: E = (I * cosθ) / r²
            return (intensita * cosTheta) / Math.pow(distanza3D, 2);
        }

        /**
         * Genera la matrice di punti di calcolo sul piano di lavoro, rispettando la normativa UNI EN 12464-1.
         * @param {number} lunghezzaStanza Lunghezza totale della stanza.
         * @param {number} larghezzaStanza Larghezza totale della stanza.
         * @param {boolean} applicaOffset Indica se applicare l'offset di 0.5m dalle pareti.
         * @returns {Array<object>} Un array di oggetti punto ({x, y, z}).
         */
        function generaMatricePunti(lunghezzaStanza, larghezzaStanza, applicaOffset) {
            let areaLunghezza = lunghezzaStanza;
            let areaLarghezza = larghezzaStanza;
            let offsetX = 0;
            let offsetY = 0;

            if (applicaOffset) {
                const offsetVal = 0.5; // Offset di 0.5 metri dalle pareti
                areaLunghezza = Math.max(0, lunghezzaStanza - 2 * offsetVal);
                areaLarghezza = Math.max(0, larghezzaStanza - 2 * offsetVal);
                offsetX = offsetVal;
                offsetY = offsetVal;
            }

            // Se l'area di calcolo è troppo piccola a causa dell'offset, non generare punti
            if (areaLunghezza <= 0 || areaLarghezza <= 0) {
                return [];
            }

            // Calcola la dimensione maggiore dell'area di calcolo per la formula 'p'
            const d = Math.max(areaLunghezza, areaLarghezza);
            // Calcola la distanza massima tra i punti (p) secondo UNI EN 12464-1
            let pMax = 0.2 * 5 * Math.log10(d); // p = 0.2 × 5 log d
            pMax = Math.min(pMax, 10); // p deve essere inferiore a 10 metri

            // Imposta una spaziatura minima per evitare troppi punti o divisioni per zero
            if (pMax < 0.1) pMax = 0.1;

            // Calcola il numero di punti desiderato basandosi su pMax
            // Aggiungi 1 perché Nx punti significano Nx-1 intervalli
            let NxDesiderato = Math.ceil(areaLunghezza / pMax) + 1;
            let NyDesiderato = Math.ceil(areaLarghezza / pMax) + 1;

            // Assicurati che ci siano almeno 2 punti per dimensione per calcolare la spaziatura
            // (se l'area è abbastanza grande da contenerli)
            NxDesiderato = Math.max(1, NxDesiderato); // Almeno 1 punto se l'area è valida
            NyDesiderato = Math.max(1, NyDesiderato);

            // Se un'area è molto piccola e non c'è spazio per più di un punto, imposta un solo punto al centro
            const Nx = (areaLunghezza > 0 && NxDesiderato === 1) ? 1 : NxDesiderato;
            const Ny = (areaLarghezza > 0 && NyDesiderato === 1) ? 1 : NyDesiderato;

            // Calcola la spaziatura effettiva per garantire equidistanza
            const spazioX = (Nx > 1) ? areaLunghezza / (Nx - 1) : 0;
            const spazioY = (Ny > 1) ? areaLarghezza / (Ny - 1) : 0;

            const matricePunti = [];
            for (let y = 0; y < Ny; y++) {
                for (let x = 0; x < Nx; x++) {
                    // Calcola la posizione del punto, includendo l'offset
                    const puntoX = offsetX + x * spazioX;
                    const puntoY = offsetY + y * spazioY;
                    matricePunti.push({ x: puntoX, y: puntoY, z: PIANO_LAVORO_Z });
                }
            }
            return matricePunti;
        }

        /**
         * Disegna la pianta della stanza, le posizioni dei faretti e i punti di calcolo.
         * @param {number} lunghezzaStanza Lunghezza totale della stanza.
         * @param {number} larghezzaStanza Larghezza totale della stanza.
         * @param {Array<object>} posizioniFaretti Array di oggetti posizione dei faretti.
         * @param {Array<object>} matricePunti Array di oggetti posizione dei punti di calcolo.
         * @param {number} numFarettiX Numero di faretti lungo l'asse X.
         * @param {number} numFarettiY Numero di faretti lungo l'asse Y.
         * @param {boolean} applicaOffset Indica se l'offset è stato applicato all'area di calcolo.
         */
        function disegnaPianta(lunghezzaStanza, larghezzaStanza, posizioniFaretti, matricePunti, numFarettiX, numFarettiY, applicaOffset) {
            const canvas = document.getElementById('piantaCanvas');
            const ctx = canvas.getContext('2d');
            const canvasWidth = canvas.width;
            const canvasHeight = canvas.height;

            // Pulisci il canvas
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);

            // Margini per la pianta
            const margin = 20;
            // Fattore di scala per adattare la pianta al canvas
            const scaleX = (canvasWidth - 2 * margin) / lunghezzaStanza;
            const scaleY = (canvasHeight - 2 * margin) / larghezzaStanza;
            const scale = Math.min(scaleX, scaleY);

            // Calcola le coordinate per disegnare il rettangolo della stanza
            const stanzaX = margin;
            const stanzaY = margin;
            const stanzaWidth = lunghezzaStanza * scale;
            const stanzaHeight = larghezzaStanza * scale;

            // Disegna il rettangolo della stanza
            ctx.strokeStyle = '#777'; // Colore per il bordo della stanza
            ctx.strokeRect(stanzaX, stanzaY, stanzaWidth, stanzaHeight);

            // Disegna l'area di calcolo effettiva se è stato applicato un offset
            if (applicaOffset) {
                const offsetVal = 0.5;
                const areaCalcoloX = stanzaX + offsetVal * scale;
                const areaCalcoloY = stanzaY + offsetVal * scale;
                const areaCalcoloWidth = (lunghezzaStanza - 2 * offsetVal) * scale;
                const areaCalcoloHeight = (larghezzaStanza - 2 * offsetVal) * scale;
                ctx.strokeStyle = '#007bff'; // Colore per l'area di calcolo
                ctx.setLineDash([5, 5]); // Linea tratteggiata
                ctx.strokeRect(areaCalcoloX, areaCalcoloY, areaCalcoloWidth, areaCalcoloHeight);
                ctx.setLineDash([]); // Ripristina linea continua
                 ctx.fillStyle = '#007bff';
                ctx.font = '10px Arial';
                ctx.fillText('Area di Calcolo', areaCalcoloX + 5, areaCalcoloY + 15);
            }


            // Disegna i faretti
            ctx.fillStyle = 'red';
            const farettoRadius = 5;
            posizioniFaretti.forEach(faretto => {
                const x = stanzaX + faretto.x * scale;
                const y = stanzaY + faretto.y * scale;
                ctx.beginPath();
                ctx.arc(x, y, farettoRadius, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Disegna i punti di calcolo
            ctx.fillStyle = 'blue';
            const puntoRadius = 3;
            matricePunti.forEach(punto => {
                // I punti sono già relativi all'area di calcolo (con offset se applicato)
                // Quindi li disegniamo aggiungendo l'offset iniziale della stanza
                const x = stanzaX + punto.x * scale;
                const y = stanzaY + punto.y * scale;
                ctx.beginPath();
                ctx.arc(x, y, puntoRadius, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Scrive il numero di faretti per asse
            ctx.fillStyle = '#bebebe'; // Colore testo
            ctx.font = '12px "Ubuntu Mono", monospace';
            ctx.fillText(`Faretti X: ${numFarettiX}`, stanzaX + 5, stanzaY + stanzaHeight + 15);
            ctx.fillText(`Faretti Y: ${numFarettiY}`, stanzaX + 110, stanzaY + stanzaHeight + 15);
        }
    </script>
</body>
</html>
